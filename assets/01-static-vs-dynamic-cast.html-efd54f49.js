import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e}from"./app-a660f98c.js";const t={},c=e(`<h2 id="what-s-static-cast-and-dynamic-cast-what-s-the-difference" tabindex="-1"><a class="header-anchor" href="#what-s-static-cast-and-dynamic-cast-what-s-the-difference" aria-hidden="true">#</a> What&#39;s static cast and dynamic cast? What&#39;s the difference?</h2><p>In C++, <code>static_cast</code> and <code>dynamic_cast</code> are two different type casting operators used to convert between types. The main difference between them lies in their behavior and the type of conversions they can perform.</p><ol><li><p><code>static_cast</code>:</p><ul><li><code>static_cast</code> is a compile-time cast that is resolved during the compilation process.</li><li>It can perform implicit conversions, such as numeric conversions (e.g., int to float) or pointer conversions within an inheritance hierarchy.</li><li>It can also perform explicit type conversions, such as casting between unrelated types, but it is the programmer&#39;s responsibility to ensure the correctness of such conversions.</li><li><code>static_cast</code> does not perform any runtime type checking.</li><li>It is generally considered safer than C-style casts since it provides more compile-time checks.</li></ul></li><li><p><code>dynamic_cast</code>:</p><ul><li><code>dynamic_cast</code> is a runtime cast that is resolved during program execution.</li><li>It is primarily used for handling conversions within an inheritance hierarchy, specifically for casting pointers or references of a base class to derived class pointers or references.</li><li>It performs a runtime type check to ensure the validity of the conversion. If the conversion is not valid (e.g., if the object being cast is not of the target type), <code>dynamic_cast</code> returns a null pointer (for pointers) or throws a <code>std::bad_cast</code> exception (for references).</li><li><code>dynamic_cast</code> is only applicable to polymorphic types, i.e., types that have at least one virtual function.</li></ul></li></ol><p>Here&#39;s an example to illustrate the usage of both casts:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Base<span class="token operator">*</span> basePtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// static_cast example</span>
    Derived<span class="token operator">*</span> derivedPtr <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Derived<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>basePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// dynamic_cast example</span>
    Derived<span class="token operator">*</span> derivedPtrDyn <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Derived<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>basePtr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>derivedPtr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;static_cast: Conversion succeeded.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>derivedPtrDyn <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;dynamic_cast: Conversion succeeded.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">delete</span> basePtr<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the code above, <code>static_cast</code> is used to convert <code>basePtr</code> to <code>Derived*</code>. Since the object being pointed to is actually of type <code>Derived</code>, the conversion succeeds.</p><p>Similarly, <code>dynamic_cast</code> is used to perform the same conversion. However, in this case, it performs a runtime type check to ensure that the object being pointed to is of the target type. Since it is indeed of type <code>Derived</code>, the conversion succeeds.</p><p>Both casts have their specific use cases, and understanding their differences and limitations is important for writing correct and maintainable code.</p><p>The above content is generated by ChatGPT</p>`,9),o=[c];function i(p,l){return n(),a("div",null,o)}const u=s(t,[["render",i],["__file","01-static-vs-dynamic-cast.html.vue"]]);export{u as default};
